#!/usr/bin/env python
"""
Claude MCP Client for PYRSM

This script allows you to use Claude Desktop with PYRSM by facilitating
code generation and execution based on natural language queries.

Usage:
  python claude_mcp_client.py [command]

Commands:
  datasets         - List available datasets
  load [dataset]   - Load a specific dataset
  analyze [query]  - Analyze data using natural language
  run [code_file]  - Run code generated by Claude

Examples:
  python claude_mcp_client.py datasets
  python claude_mcp_client.py load demand_uk
  python claude_mcp_client.py analyze "Is demand greater than 1750?"
  python claude_mcp_client.py run analysis_code.py
"""

import sys
import os
import json
import importlib.util
import pandas as pd
import matplotlib.pyplot as plt
from typing import Dict, Any, Optional, Union, List, Tuple

# Import PYRSM modules
import pyrsm as rsm
from pyrsm.example_data import load_data
from pyrsm.basics.single_mean import single_mean

# Dictionary to store loaded datasets
session_data = {}

def get_available_datasets() -> Dict:
    """
    List all available datasets in the pyrsm package.
    
    Returns:
        Dictionary containing information about the available datasets
    """
    # Get all datasets
    all_data, all_descriptions = load_data()
    
    # Format the result for display
    datasets = []
    
    for name, data in all_data.items():
        description = all_descriptions.get(name, "No description available")
        
        # Get just the first 100 characters of the description
        short_description = description[:100] + "..." if len(description) > 100 else description
        
        datasets.append({
            "name": name,
            "rows": len(data),
            "columns": len(data.columns),
            "description": short_description,
            "column_names": list(data.columns)
        })
    
    return {
        "datasets": datasets,
        "count": len(datasets)
    }

def load_dataset(dataset_name: str) -> Dict:
    """
    Load a specific dataset by name.
    
    Args:
        dataset_name: Name of the dataset to load
        
    Returns:
        Dictionary containing the dataset information and sample data
    """
    global session_data
    
    # Try to find which package the dataset is in
    data = None
    description = None
    
    for pkg in ["data", "design", "basics", "model", "multivariate"]:
        try:
            data, description = load_data(pkg=pkg, name=dataset_name)
            break
        except:
            continue
    
    # If we can't find it by package, try loading it directly
    if data is None:
        try:
            data, description = load_data(name=dataset_name)
        except:
            raise ValueError(f"Dataset '{dataset_name}' not found")
    
    # Store in session for future use
    session_data[dataset_name] = data
    
    # Format the result
    result = {
        "name": dataset_name,
        "rows": len(data),
        "columns": len(data.columns),
        "column_names": list(data.columns),
        "description": description,
        "head": data.head(5).to_dict(),
        "code_sample": f"import pyrsm as rsm\n{dataset_name}, {dataset_name}_description = rsm.load_data(name='{dataset_name}')"
    }
    
    return result

def analyze_data(dataset_name: str, question: str) -> Dict:
    """
    Analyze a dataset based on a natural language question.
    
    Args:
        dataset_name: Name of the dataset to analyze
        question: The data analysis question to answer
        
    Returns:
        Dictionary containing the analysis results and generated code
    """
    global session_data
    
    # Load the dataset if it's not already in session
    if dataset_name not in session_data:
        try:
            result = load_dataset(dataset_name)
            print(f"Loaded dataset: {dataset_name}")
        except Exception as e:
            return {
                "error": f"Could not load dataset: {str(e)}"
            }
    
    data = session_data[dataset_name]
    
    # Analyze the question and generate code
    from pyrsm.mcp.notebook_server import analyze_question
    
    # Set the name attribute for the data
    data.name = dataset_name
    
    # Generate code for the analysis
    code, explanation = analyze_question(question, data)
    
    # Save the generated code to a file
    code_file = "claude_generated_code.py"
    with open(code_file, "w") as f:
        f.write(f"# Generated code for: {question}\n")
        f.write(f"# Dataset: {dataset_name}\n\n")
        f.write("import pandas as pd\n")
        f.write("import matplotlib.pyplot as plt\n")
        f.write("import numpy as np\n")
        f.write("import pyrsm as rsm\n\n")
        
        # Add the dataset loading code
        f.write(f"# Load the dataset\n")
        f.write(f"{dataset_name}, {dataset_name}_description = rsm.load_data(name='{dataset_name}')\n\n")
        
        # Add the analysis code
        f.write(code)
    
    return {
        "dataset": dataset_name,
        "question": question,
        "explanation": explanation,
        "generated_code": code,
        "code_file": code_file,
        "run_command": f"python {code_file}"
    }

def run_code_file(file_path: str) -> Dict:
    """
    Run a Python code file.
    
    Args:
        file_path: Path to the Python file to run
        
    Returns:
        Dictionary containing the execution results
    """
    if not os.path.exists(file_path):
        return {
            "error": f"File not found: {file_path}"
        }
    
    # Create a module spec
    spec = importlib.util.spec_from_file_location("generated_module", file_path)
    module = importlib.util.module_from_spec(spec)
    
    try:
        # Execute the module
        spec.loader.exec_module(module)
        return {
            "status": "success",
            "message": f"Successfully executed {file_path}"
        }
    except Exception as e:
        return {
            "status": "error",
            "error": str(e)
        }

def display_datasets(data: Dict) -> None:
    """Display datasets in a readable format."""
    print(f"Found {data['count']} datasets:")
    print("-" * 80)
    print(f"{'NAME':<15} {'ROWS':<8} {'COLUMNS':<8} {'DESCRIPTION':<40}")
    print("-" * 80)
    
    for dataset in data['datasets']:
        print(f"{dataset['name']:<15} {dataset['rows']:<8} {dataset['columns']:<8} {dataset['description'][:40]}")

def display_dataset_info(data: Dict) -> None:
    """Display detailed information about a dataset."""
    print(f"Dataset: {data['name']}")
    print(f"Rows: {data['rows']}, Columns: {data['columns']}")
    print(f"Description: {data['description']}")
    print("\nColumns:")
    for col in data['column_names']:
        print(f"- {col}")
    
    print("\nSample data (first 5 rows):")
    # Convert the head dict back to DataFrame for display
    head_df = pd.DataFrame(data['head'])
    print(head_df)
    
    print("\nCode to load this dataset:")
    print("-" * 80)
    print(data['code_sample'])
    print("-" * 80)

def display_analysis_results(data: Dict) -> None:
    """Display analysis results."""
    print(f"Dataset: {data['dataset']}")
    print(f"Question: {data['question']}")
    print(f"Explanation: {data['explanation']}")
    
    print("\nGenerated code saved to:", data['code_file'])
    print("Run this code with:")
    print(f"  python {data['code_file']}")
    
    print("\nPreview of generated code:")
    print("-" * 80)
    lines = data['generated_code'].strip().split('\n')
    # Print the first 10 lines
    for line in lines[:min(10, len(lines))]:
        print(line)
    if len(lines) > 10:
        print("...")
    print("-" * 80)

def display_execution_results(data: Dict) -> None:
    """Display execution results."""
    if data.get('status') == 'success':
        print(data['message'])
    else:
        print("Error executing code:")
        print(data.get('error', 'Unknown error'))

def main() -> None:
    """Main function to handle command line arguments."""
    if len(sys.argv) < 2:
        print(__doc__)
        return
    
    command = sys.argv[1].lower()
    
    try:
        if command == "datasets":
            # List available datasets
            data = get_available_datasets()
            display_datasets(data)
        
        elif command == "load" and len(sys.argv) >= 3:
            # Load a specific dataset
            dataset_name = sys.argv[2]
            data = load_dataset(dataset_name)
            display_dataset_info(data)
        
        elif command == "analyze" and len(sys.argv) >= 3:
            # Analyze a dataset with a natural language question
            if len(sys.argv) < 4:
                print("Error: Missing dataset name or question.")
                print("Usage: python claude_mcp_client.py analyze [dataset_name] [question]")
                return
            
            dataset_name = sys.argv[2]
            question = sys.argv[3]
            data = analyze_data(dataset_name, question)
            
            if 'error' in data:
                print("Error:", data['error'])
            else:
                display_analysis_results(data)
        
        elif command == "run" and len(sys.argv) >= 3:
            # Run generated code file
            file_path = sys.argv[2]
            result = run_code_file(file_path)
            display_execution_results(result)
        
        else:
            print("Unknown command or missing arguments.")
            print(__doc__)
    
    except Exception as e:
        print(f"Error: {str(e)}")

if __name__ == "__main__":
    main()